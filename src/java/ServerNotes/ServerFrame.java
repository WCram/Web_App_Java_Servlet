// William Cram
package ServerNotes;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

//-------------------------- Same server info from our project a few weeks ago
/**
 *
 * @author Will
 */
public class ServerFrame extends javax.swing.JFrame {

    /**
     * Creates new form ServerFrame
     */
    public ServerFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jbtnServerStart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jbtnServerStart.setText("Server Start");
        jbtnServerStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnServerStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane1)
                    .addComponent(jbtnServerStart, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnServerStart)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnServerStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnServerStartActionPerformed
        // TODO add your handling code here:
        Thread serverThread = new Thread(new SimpleServer());
        serverThread.start();
    }//GEN-LAST:event_jbtnServerStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton jbtnServerStart;
    // End of variables declaration//GEN-END:variables

    public class SimpleServer implements Runnable {

        @Override
        public void run() {

            // 1. Declare ServerSocket
            ServerSocket server = null;

            try {
                server = new ServerSocket(9999);
            } catch (IOException ex) {
                jTextArea1.setText("IOExeption:... \n" + ex.getMessage());
                return;
            }

            String hostName = "";
            String hostAddress = "";

            try {
                InetAddress hostInetAddress = InetAddress.getLocalHost();
                hostName = hostInetAddress.getHostName();
                hostAddress = hostInetAddress.getHostAddress();

            } catch (UnknownHostException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
                return;
            }

            jTextArea1.append("Server set at : " + hostName + " " + hostAddress + " " + server.getLocalPort());

            while (true) {

                try {
                    Socket client = server.accept();

                    // display/log client info
                    SocketAddress clientAddress = client.getRemoteSocketAddress();
                    jTextArea1.append("\nClient socket address: " + clientAddress);

                    // Start the client thread
                    Thread thread = new ClientProcessingThread(client);
                    thread.start();
                } catch (IOException ex) {
                    Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        } // End run()

    } // End SimpleServer

    private class ClientProcessingThread extends Thread {

        private Socket client;

        public ClientProcessingThread(Socket client) {
            this.client = client;
        }

        @Override
        public void run() {
            PrintWriter out = null; //for the server to send
            BufferedReader in = null; // for the server

            try {

                out = new PrintWriter(client.getOutputStream(), true);

                in = new BufferedReader(new InputStreamReader(client.getInputStream()));

                // get client request
                String request = "";
                String response = "";
                String command;
                do {
                    request = in.readLine();
                    jTextArea1.append(request);

                    // assuming that reqeust contains protocol commands;
                    String[] tokens = request.split(" ");
                    if (tokens.length >= 1) {
                        command = tokens[0];
                    } else {
                        command = "default";
                    }

                    switch (command) {

                        case "add":
                            if (tokens.length == 3) {
                                try {
                                    double x = Double.parseDouble(tokens[1].trim());
                                    double y = Double.parseDouble(tokens[2].trim());
                                    double total = x + y;
                                    response = x + " + " + y + " = " + total;

                                } catch (NumberFormatException nfe) {
                                    response = "Number FormatException: invalid values";
                                }
                            } else {
                                response = "add command requires 2 values";
                            }
                            break;

                        case "register":
                            if (tokens.length == 4) {
                                String toSave = tokens[1] + "," + tokens[2] + "," + tokens[3];
                                response = toSave;

                                try (FileWriter fw = new FileWriter("registeredUsers.txt", true);
                                        BufferedWriter bw = new BufferedWriter(fw);
                                        PrintWriter toFile = new PrintWriter(bw)) {
                                    toFile.println(toSave);

                                    response = "User is registered";

                                } catch (IOException e) {
                                    JOptionPane.showMessageDialog(rootPane, e.getMessage());
                                }

                            } else {
                                response = "You need to enter a name, password and email";
                            }
                            break;
                        case "bye":
                            response = "Good Night: you have been disconnected. Come back at a later time.";

                            break;
                        case "error":
                            response = "request not in the right format";
                            break;
                        // used to show currect socketAddress client is connected to
                        case "report":
                            response = client.getRemoteSocketAddress().toString();
                            break;
                        default:
                            response = "Undefined command request";
                            break;
                    }

                    out.println(response);

                } while (!request.equals("bye"));

                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }

            } catch (IOException ex) {
                Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    } // End ClientProcessingThread
}
